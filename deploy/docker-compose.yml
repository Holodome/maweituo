version: "3.4"

services:
  grafana:
    image: grafana/grafana
    container_name: maweituo-grafana
    restart: "no"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/datasource/default.yaml:/etc/grafana/provisioning/datasources/default.yaml
      - ./grafana/dashboard/default.yaml:/etc/grafana/provisioning/dashboards/default.yaml
      - ./grafana/dashboard/dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json
    ports:
      - "3000:3000"
    networks:
      - backend 
    depends_on:
      prometheus:
        condition: service_started

  prometheus:
    image: prom/prometheus:latest
    container_name: maweituo-prometheus
    restart: "no"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - backend 
    depends_on:
      core:
        condition: service_started

  proxy:
    image: 'nginx'
    container_name: maweituo-proxy
    restart: always 
    ports:
      - '80:80'
    networks:
      - backend 
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./static:/usr/share/nginx/html:ro
    depends_on:
      core:
        condition: service_started
        
  # pgadmin:
  #   image: 'dpage/pgadmin4'
  #   container_name: maweituo-pgadmin
  #   restart: always 
  #   networks:
  #     - backend
  #   depends_on:
  #     postgres:
  #       condition: service_started
  #   volumes:
  #      - pgadmin_data:/var/lib/pgadmin
  #   ports:
  #     - '5050:5050'
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@admin.com
  #     PGADMIN_DEFAULT_PASSWORD: root 
  #     PGADMIN_LISTEN_PORT: 5050
  
  core-zio:
    image: 'maweituo-core-zio:0.1.0'
    container_name: maweituo-core-zio
    volumes:
      - ./maweituo-config-zio.json:/etc/maweituo-config.json
    restart: always
    ports:
      - '8081:8080'
    networks:
      - backend
    depends_on:
      redis:
        condition: service_started
      minio:
        condition: service_started
    environment:
      - MW_JWT_SECRET_KEY=123
      - MW_MINIO_USER=minioadmin
      - MW_MINIO_PASSWORD=minioadmin
      - MW_CONFIG_PATH=/etc/maweituo-config.json

  core:
    image: 'maweituo-core:0.1.0'
    container_name: maweituo-core
    volumes:
      - ./maweituo-config.json:/etc/maweituo-config.json
    restart: always
    ports:
      - '8080:8080'
    networks:
      - backend
    depends_on:
      redis:
        condition: service_started
      minio:
        condition: service_started
    environment:
      - MW_JWT_SECRET_KEY=123
      - MW_MINIO_USER=minioadmin
      - MW_MINIO_PASSWORD=minioadmin
      - MW_CONFIG_PATH=/etc/maweituo-config.json

  redis:
    image: 'redis:6.2-alpine'
    container_name: maweituo-redis
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    restart: always
    ports:
      - '6379:6379'
    networks:
      - backend

  minio:
    image: 'minio/minio:RELEASE.2024-09-13T20-26-02Z'
    container_name: maweituo-minio
    command: 'minio server /local --console-address :9001'
    restart: always
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - backend
    volumes:
      - 'minio_data:/local'
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_DEFAULT_BUCKETS=maweituo
      
  postgres:
    image: 'pgvector/pgvector:pg17'
    container_name: maweituo-postgres
    restart: always 
    ports:
      - 5432:5432
    networks:
      - backend
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: maweituo
      POSTGRES_USER: maweituo
      POSTGRES_DB: maweituo

networks:
  backend:
    driver: bridge

volumes:
  minio_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data: {}
  grafana-storage: {}
